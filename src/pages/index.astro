---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';
import { getCollection } from 'astro:content';
const projects = await getCollection('projects');
const publications = await getCollection('publications');
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
        <main>
			<div class="bg-blob" id="blob"></div>
            <section id="home" style="padding: 7rem 0 3rem;">
                <h1 style="margin-bottom: .75rem; letter-spacing: .2px;">Build with clarity and style.</h1>
                <p style="max-width: 48rem; font-size: 1.2rem; color: rgb(var(--gray));">
                    A minimalist, modern site to showcase projects, publications, and writing — with bold
                    typography and a refined layout inspired by Cavora.
                </p>
            </section>

            <section id="projects" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Projects</h2>
				<div style="display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem;">
                    {projects.map((p) => (
                        <article class="card reveal clickable" data-slug={p.slug} data-title={p.data.title} data-description={p.data.description}>
                            <h3 style="margin-bottom:.25rem;">{p.data.title}</h3>
                            <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">{p.data.description}</p>
                        </article>
                    ))}
                </div>
            </section>
            <hr class="section-divider" />

            <section id="tutorials" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Tutorials</h2>
                <div style="display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem;">
                    <article class="card reveal">
                        <h3 style="margin-bottom:.25rem;">Tutorial Topic</h3>
                        <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">Educational content, videos, and code notebooks.</p>
                    </article>
                    <article class="card reveal">
                        <h3 style="margin-bottom:.25rem;">Notebook Walkthrough</h3>
                        <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">Step-by-step guide with code examples.</p>
                    </article>
                </div>
            </section>
            <hr class="section-divider" />

            <section id="events" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Events</h2>
                <div style="display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem;">
                    <article class="card reveal">
                        <h3 style="margin-bottom:.25rem;">Upcoming Workshop</h3>
                        <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">Date • Location • Short description.</p>
                    </article>
                </div>
            </section>
            <hr class="section-divider" />

            <section id="publications" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Publications</h2>
                <div style="display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem;">
                    {publications.map((p) => (
                        <article class="card reveal clickable" data-slug={p.slug} data-title={p.data.title} data-description={p.data.abstract || ''} data-section="publications">
                            <h3 style="margin-bottom:.25rem;">{p.data.title}</h3>
                            <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">{p.data.authors?.join(', ')}</p>
                        </article>
                    ))}
                </div>
            </section>
            <hr class="section-divider" />

            <section id="experience" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Experience</h2>
                <div style="display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem;">
                    <article class="card reveal">
                        <h3 style="margin-bottom:.25rem;">Role — Company</h3>
                        <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">Dates • Key responsibilities</p>
                    </article>
                </div>
            </section>
            <hr class="section-divider" />

            <section id="education" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Education</h2>
                <div style="display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem;">
                    <article class="card reveal">
                        <h3 style="margin-bottom:.25rem;">Degree — School</h3>
                        <p style="margin:0; font-size:.95rem; color: rgb(var(--gray));">Dates • Thesis (optional)</p>
                    </article>
                </div>
            </section>
            <hr class="section-divider" />

            <section id="resume" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">Resume</h2>
                <p style="max-width: 48rem;">A downloadable PDF will be added here.</p>
            </section>
            <hr class="section-divider" />

            <section id="about" style="padding: 3rem 0;">
                <h2 style="margin: 1rem 0;">About</h2>
                <p style="max-width: 48rem;">Short bio and mission statement.</p>
            </section>
        </main>
<div class="modal-overlay" id="modal">
    <div class="modal">
        <button class="modal-close" id="modalClose" aria-label="Close">×</button>
        <h3 id="modalTitle">Title</h3>
        <p id="modalBody">Details</p>
        <p style="margin-top: .75rem;"><a id="modalLink" href="#">View full details →</a></p>
    </div>
 </div>
<script>
    // Restore scroll position when coming back from section pages
    try {
        const params = new URLSearchParams(location.search);
        const s = params.get('scroll');
        if (s) setTimeout(() => window.scrollTo({ top: parseInt(s, 10) || 0, behavior: 'auto' }), 0);
    } catch {}
    const observer = new IntersectionObserver((entries) => {
        for (const entry of entries) {
            if (entry.isIntersecting) entry.target.classList.add('visible');
        }
    }, { threshold: 0.15 });
    document.querySelectorAll('.reveal').forEach(el => observer.observe(el));

    // Active nav link highlighting
    const sections = Array.from(document.querySelectorAll('section[id]'));
    const navLinks = Array.from(document.querySelectorAll('nav .internal-links a'));
    const activeObs = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const id = '#' + entry.target.id;
                navLinks.forEach(a => a.classList.toggle('active', a.getAttribute('href') === id));
            }
        });
    }, { rootMargin: '-40% 0px -55% 0px', threshold: 0.01 });
    sections.forEach(sec => activeObs.observe(sec));

    // Parallax blob reacts to mouse move
    const blob = document.getElementById('blob');
    window.addEventListener('mousemove', (e) => {
        const x = (e.clientX / window.innerWidth - 0.5) * 40;
        const y = (e.clientY / window.innerHeight - 0.5) * 40;
        blob && (blob.style.transform = `translateX(-50%) translate(${x}px, ${y}px)`);
    });

    // Modal for card details
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    const modalClose = document.getElementById('modalClose');
    const modalLink = document.getElementById('modalLink');
    document.querySelectorAll('.card.clickable').forEach(card => {
        card.addEventListener('click', () => {
            modalTitle.textContent = card.getAttribute('data-title') || 'Details';
            modalBody.textContent = card.getAttribute('data-description') || '';
            modal?.classList.add('open');
            const slug = card.getAttribute('data-slug');
            const section = card.getAttribute('data-section') || 'projects';
            const scroll = window.scrollY;
            // Ensure query precedes hash for correct parsing
            if (slug && modalLink) modalLink.setAttribute('href', `/${section}?from=home&scroll=${scroll}#${slug}`);
        });
    });
    modalClose?.addEventListener('click', () => modal?.classList.remove('open'));
    // Force navigation to detail page on link click
    modalLink?.addEventListener('click', (e) => {
        e.preventDefault();
        const href = modalLink.getAttribute('href');
        if (href) window.location.assign(href);
    });
    modal?.addEventListener('click', (e) => { if (e.target === modal) modal.classList.remove('open'); });
</script>
		<Footer />
	</body>
</html>
